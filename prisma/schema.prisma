// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                 @id @default(cuid())
  email                           String                 @unique
  name                            String?
  emailVerified                   DateTime?
  image                          String?
  
  // Stripe fields
  stripeCustomerId               String?                @unique
  stripeSubscriptionId           String?                @unique
  stripePriceId                  String?
  subscriptionStatus             SubscriptionStatus     @default(FREE)
  subscriptionPlan               SubscriptionPlan       @default(FREE)
  subscriptionCurrentPeriodStart DateTime?
  subscriptionCurrentPeriodEnd   DateTime?
  
  // App usage tracking
  voiceNotesUsed                 Int                    @default(0)
  screenshotsUsed               Int                    @default(0)
  lastUsageReset                DateTime               @default(now())
  
  // Monthly usage tracking
  monthlyNotesCreated           Int                    @default(0)
  monthlyAISummaries            Int                    @default(0)
  monthlyVoiceTranscriptions    Int                    @default(0)
  monthlyScreenshots            Int                    @default(0)
  monthlyEmbeddings             Int                    @default(0)
  
  // Timestamps
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  
  // Relations
  sessions                       Session[]
  voiceNotes                     VoiceNote[]
  screenshots                    Screenshot[]
  notes                          Note[]
  
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("sessions")
}

model VoiceNote {
  id              String   @id @default(cuid())
  userId          String
  title           String?
  content         String
  transcription   String?
  duration        Int?     // in seconds
  fileUrl         String?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("voice_notes")
}

model Screenshot {
  id              String   @id @default(cuid())
  userId          String
  title           String?
  description     String?
  imageUrl        String
  extractedText   String?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("screenshots")
}

model Note {
  id                        String        @id @default(cuid())
  title                     String
  content                   String
  userId                    String
  
  // Transcription fields
  transcriptionJobId        String?
  transcriptionS3Key        String?
  transcriptionStatus       String?
  transcriptionConfidence   Float?
  isProcessing             Boolean       @default(false)
  
  // AI Summary fields
  summary                   String?
  summaryGeneratedAt        DateTime?
  summaryTokensUsed         Int?
  keyPoints                 String?       // JSON
  hasSummary               Boolean       @default(false)
  
  // Topic extraction fields
  extractedTopics           String?       // JSON
  topicsGeneratedAt         DateTime?
  topicsTokensUsed          Int?
  hasTopics                Boolean       @default(false)
  
  // Embedding fields
  embedding                 String?       // Vector type will be handled by pgvector
  embeddingGeneratedAt      DateTime?
  embeddingModel           String?
  hasEmbedding             Boolean       @default(false)
  
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                      NoteTag[]
  
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  @@map("notes")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#3B82F6")
  
  notes     NoteTag[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("tags")
}

model NoteTag {
  noteId    String
  tagId     String
  
  note      Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([noteId, tagId])
  @@map("note_tags")
}

enum SubscriptionStatus {
  FREE
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum SubscriptionPlan {
  FREE
  PRO
  TEAM
} 